---
alwaysApply: true
---
# Supabase + Next.js App Router 認証ベストプラクティス

## 1. プロジェクト設定

### 必要なパッケージのインストール
```bash
npm install @supabase/supabase-js @supabase/ssr
```

### 環境変数の設定
```env
NEXT_PUBLIC_SUPABASE_URL=<your_supabase_project_url>
NEXT_PUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>
```

## 2. Supabaseクライアントの実装

### ファイル構成
```
utils/supabase/
├── client.ts    # Client Component用
├── server.ts    # Server Component用
└── middleware.ts # Middleware用
```

### Client Component用クライアント
```tsx
// utils/supabase/client.ts
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
```

### Server Component用クライアント
```tsx
// utils/supabase/server.ts
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // cookies()は読み取り専用のコンテキストで呼び出される可能性がある
          }
        },
      },
    }
  )
}
```

## 3. Middlewareの実装

### 認証状態の管理
```tsx
// middleware.ts
import { type NextRequest } from 'next/server'
import { updateSession } from '@/utils/supabase/middleware'

export async function middleware(request: NextRequest) {
  return await updateSession(request)
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
```

### Middleware utilities
```tsx
// utils/supabase/middleware.ts
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function updateSession(request: NextRequest) {
  let supabaseResponse = NextResponse.next({
    request,
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => {
            request.cookies.set(name, value)
            supabaseResponse.cookies.set(name, value, options)
          })
        },
      },
    }
  )

  // 重要: 認証トークンの更新のためgetUser()を呼び出す
  const { data: { user } } = await supabase.auth.getUser()

  return supabaseResponse
}
```

## 4. 認証の実装

### ログイン/サインアップページ
```tsx
// app/login/page.tsx
import { login, signup } from './actions'

export default function LoginPage() {
  return (
    <form>
      <label htmlFor="email">Email:</label>
      <input id="email" name="email" type="email" required />
      <label htmlFor="password">Password:</label>
      <input id="password" name="password" type="password" required />
      <button formAction={login}>Log in</button>
      <button formAction={signup}>Sign up</button>
    </form>
  )
}
```

### Server Actions
```tsx
// app/login/actions.ts
'use server'

import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'
import { createClient } from '@/utils/supabase/server'

export async function login(formData: FormData) {
  const supabase = await createClient()

  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  }

  const { error } = await supabase.auth.signInWithPassword(data)

  if (error) {
    redirect('/error')
  }

  revalidatePath('/', 'layout')
  redirect('/private')
}

export async function signup(formData: FormData) {
  const supabase = await createClient()

  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  }

  const { error } = await supabase.auth.signUp(data)

  if (error) {
    redirect('/error')
  }

  revalidatePath('/', 'layout')
  redirect('/private')
}
```

## 5. 認証確認の実装

### メール確認用Route Handler
```tsx
// app/auth/confirm/route.ts
import { type EmailOtpType } from '@supabase/supabase-js'
import { type NextRequest } from 'next/server'
import { createClient } from '@/utils/supabase/server'
import { redirect } from 'next/navigation'

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const token_hash = searchParams.get('token_hash')
  const type = searchParams.get('type') as EmailOtpType | null
  const next = searchParams.get('next') ?? '/'

  if (token_hash && type) {
    const supabase = await createClient()
    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    })

    if (!error) {
      redirect(next)
    }
  }

  redirect('/error')
}
```

## 6. 保護されたページの実装

### Server Componentでの認証チェック
```tsx
// app/private/page.tsx
import { redirect } from 'next/navigation'
import { createClient } from '@/utils/supabase/server'

export default async function PrivatePage() {
  const supabase = await createClient()
  const { data, error } = await supabase.auth.getUser()

  if (error || !data?.user) {
    redirect('/login')
  }

  return <p>Hello {data.user.email}</p>
}
```

## 7. 重要なセキュリティプラクティス

### ❌ 避けるべきパターン
```tsx
// Server Componentでsession()を使用（非推奨）
const { data: { session } } = await supabase.auth.getSession()
// セッションはサーバー側で信頼できない
```

### ✅ 推奨パターン
```tsx
// 常にgetUser()を使用してサーバー側で認証検証
const { data: { user }, error } = await supabase.auth.getUser()
if (error || !user) {
  redirect('/login')
}
```

## 8. メール確認テンプレートの設定

### Supabase Dashboardでの設定
- Auth templates ページに移動
- `Confirm signup` テンプレートで以下に変更：
```
{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email
```

## 9. ベストプラクティス

### データ取得時のセキュリティ
```tsx
// cookies()を呼び出してNext.jsキャッシュから除外
export default async function Page() {
  const supabase = await createClient()
  
  // 認証が必要なデータ取得の前にユーザー確認
  const { data: { user } } = await supabase.auth.getUser()
  if (!user) {
    redirect('/login')
  }
  
  // ユーザー固有のデータのみ取得
  const { data } = await supabase
    .from('private_data')
    .select('*')
    .eq('user_id', user.id)
  
  return <div>{/* データ表示 */}</div>
}
```

### エラーハンドリング
```tsx
// app/error/page.tsx
export default function ErrorPage() {
  return (
    <div>
      <h1>認証エラーが発生しました</h1>
      <p>もう一度ログインをお試しください。</p>
    </div>
  )
}
```

### ログアウト機能
```tsx
// Server Action for logout
export async function logout() {
  'use server'
  
  const supabase = await createClient()
  await supabase.auth.signOut()
  revalidatePath('/', 'layout')
  redirect('/login')
}
```

## 10. パフォーマンス最適化

### キャッシュ戦略
- 認証データは`cookies()`呼び出しでキャッシュから除外
- 公開データは適切にキャッシュを活用
- `revalidatePath()`で必要な場合のみ再検証

### Client Componentでの使用
```tsx
'use client'
import { createClient } from '@/utils/supabase/client'
import { useEffect, useState } from 'react'

export function UserProfile() {
  const [user, setUser] = useState(null)
  const supabase = createClient()

  useEffect(() => {
    const getUser = async () => {
      const { data: { user } } = await supabase.auth.getUser()
      setUser(user)
    }
    getUser()
  }, [supabase])

  return <div>{user?.email}</div>
}
```
